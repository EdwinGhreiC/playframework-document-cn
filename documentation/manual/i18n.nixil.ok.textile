h1. 国际化支持(I18N)

使用国际化支持(I18N)能够使你的应用根据用户所在地区的不同选择不同的语言。下面介绍如何在引用中使用国际化。

h2. <a name="utf8">只允许使用UTF-8</a>

Play只支持UTF-8一种字符编码.这是因为多编码会导致十分诡异难以处理的问题，所以我们决定仅支持一种。UTF-8编码涵盖了所有语言的所有字符。

确认你的应用程序的每个角落都是使用UTF-8编码，也就是说：

* 所有的源文件都要用UTF-8来编写
* HTTP头中也要使用UTF-8
* 把所有HTML页面的meta标签都设置为UTF-8
* 如果使用了数据库的话，将数据库的字符集也设置为UTF-8, 并且数据库连接也要使用UTF-8

p(note). **提示**

因为想要一致使用UTF-8编码，所以Play的大多数配置文件都没有被命名为@xxx.properties@，虽然事实上他们就是properties文件。这是因为Java强迫规定了properties文件必须使用**ISO-8859-1**编码，而Play喜欢UTF-8，懂啦？

h2. <a name="messages">抽取你的Message</a>

支持I18N的第一步是将所有的message(也就是你想要国际化的信息)都提取到外部资源文件中。

在应用的conf目录下创建一个名为messages的文件，它其实就是一个Java properties文件的格式。

bc. hello=Hello!
back=Back

然后，你就可以为每种语言创建一个对应的message文件，其扩展名为ISO标准的语言代码

例如，包含了中文翻译的资源文件应该被命名为conf/messages.zh，其中的内容可能是

bc. hello=你好！
back=回退

h2. <a name="languages">定义程序支持的语言类型</a>

在application.conf文件中加入要支持的语言种类。例如application.langs=fr,en,ja

当用户第一次向发来请求时，Play会通过解析http头中Accept-language的值来猜测用户的想要的语言, 并以@PLAY_LANG@作为键值保存在cookie中，这样下一次请求发来的时候将使用同样的语言。

如果有需要的话，可以通过en_US，en_GB或zh_CN,zh_TW这样的扩展名来区别支持同一语言的不同变种。然而值得注意的是某些用户可能只会提供语言信息而不提供所在国家的信息，因此，你总是应该提供一个扩展名中不包含国家代码的资源文件。

例如，如果你大部分的用户是来自美国，而你想要支持英式英语，推荐的做法是使用messages.en来支持作为默认的美式英语资源文件的扩展名，而使用en_GB来支持英式英语。

在程序代码中，你可以通过访问play.i18n.Lang对象来获取当前使用的语言

bc. String lang = Lang.get();

如果想要永久性的改变用户的语言，可以使用change()方法：

bc. Lang.change("ja");

新的language值将会保存在用户的cookie中

h2. <a name="dates">根据locale设置日期格式</a>

可以在配置文件中通过设置"date.format"的值来指定默认的日期格式

对于特定地区，可以通过设置date.format.{locale}来指定针对该地区的日期格式，如
date.format.fr=dd/MM/yyyy

h2(#retrieve). <a>获取本地化消息</a>

h3(#argument). 消息参数

在程序代码中可以使用@play.i18n.Messages@对象来获取定义在资源文件中的message。

bc. public static void hello() {
    renderText(Messages.get("hello"));
}

我们支持使用标准的@java.util.Formatter@的‘‘Format string syntax’，你可以在message中定义需要动态替换的内容

bc. hello=Hello %s!

where @%s@ represents a message argument that will be output as a @String@. Message arguments are provided by additional (varargs) arguments to @Messages.get@:

这里@%s%代表一个字符串类型的占位符。用来替换值作为@Message.get@方法的额外参数来传入。

bc. public static void hello(String user) {
    renderText(Messages.get("hello", user));
}

h3(#template). 在模板中输出消息参数

在模板中你可以使用特殊的@&{...}@语法来显示本地化消息

bc. <h1>&{'hello'}</h1>

或者像这样使用有动态替换的消息参数

bc. <h1>&{'hello', params.user}</h1>


h3(#arguments). 多参数

你可以在一条message中定义多个参数，例如下面这个，就使用了两个‘数字类型’的参数

bc. guess=请输入一个介于%d和%d中间的数字

这两个参数将按照传入的顺序分别替换message中的两个占位符
bc. <p>&{'guess', low, high}</p>


h3(#indices). 参数索引

消息参数的索引默认与其顺序相同，你也可以显示的指定索引，从而指定参数顺序。例如下面这个英文message的定义中有两个参数：

bc. guess.characteristic=Guess %s’s %s.

模板中像这样使用：

bc. <p>&{'guess.characteristic', person.name, 'age'}</p>

而对应的法语翻译文件中，这两个参数的位置却是相反的，所以这时候我们需要显示的为法语资源文件的参数指定顺序。

bc. guess.characteristic=Devinez %2$s de %1$s.

这里我们使用了@%2$s@来输出**第二个**十进制整形参数

最后，我们想要为这个本地化文件加入一个特有的"age"，于是我们修改一下输出，来使用消息的key@person.age@，将这个message在英语和法语中的定义修改为:

bc. guess.characteristic=Guess %s’s &{%s}.
person.age = age

和

bc. guess.characteristic=Devinez &{%2$s} de %1$s.
person.age = l’age

这里@&{%s}@的作用是使用参数值来作为消息的key，在资源文件中进行匹配。

p(note). **Continuing the discussion**
 
Next: %(next)"Cache":cache%.
